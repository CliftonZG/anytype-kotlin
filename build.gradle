import com.android.build.gradle.LibraryPlugin

buildscript {
    ext.compile_sdk = 33
    ext.target_sdk = 32
    ext.min_sdk = 26

    ext.application_id = 'com.anytypeio.anytype'
    ext.version_name = '1.0'
    ext.version_code = 1
    ext.test_runner = 'androidx.test.runner.AndroidJUnitRunner'

    def githubProperties = new Properties()
    def githubPropertiesFile = file("$rootDir${File.separator}github.properties")
    githubProperties.load(new FileInputStream(githubPropertiesFile))

    def apiKeysProperties = new Properties()
    def apiKeysPropertiesFile = file("$rootDir${File.separator}apikeys.properties")
    apiKeysProperties.load(new FileInputStream(apiKeysPropertiesFile))

    ext.sentryApiKey = apiKeysProperties["sentry_dsn"]

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/anytypeio/go-anytype-middleware")
            credentials {
                username = githubProperties['gpr.usr']
                password = githubProperties['gpr.key']
            }
        }

    }
}

plugins {
    alias(libs.plugins.application) apply false
    alias(libs.plugins.library) apply false
    alias(libs.plugins.kotlinAndroid) apply false
    alias(libs.plugins.kserialization) apply false
    alias(libs.plugins.wire) apply false
    alias(libs.plugins.dokka) apply false
    alias(libs.plugins.firebaseDistribution) apply false
    alias(libs.plugins.crashlytics) apply false
    alias(libs.plugins.navigation) apply false
    alias(libs.plugins.gms) apply false
}

def testDebugAll = tasks.create("testDebugAll")

//https://www.droidcon.com/2022/03/11/reducing-gradle-boilerplate-in-multi-module-android-projects/
subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if (plugin instanceof LibraryPlugin) {

            android {
                def config = rootProject.extensions.getByName("ext")
                compileSdkVersion config["compile_sdk"]

                defaultConfig {
                    minSdkVersion config["min_sdk"]
                    targetSdkVersion config["target_sdk"]
                    testInstrumentationRunner config["test_runner"]
                }

                testOptions {
                    unitTests {
                        includeAndroidResources = true
                    }
                }
            }
        }
    }

    plugins.withId("kotlin") {
        testDebugAll.dependsOn(tasks.named("test"))
    }
    plugins.withId("com.android.library") {
        project.apply from: "$rootDir/lint.gradle"
        afterEvaluate {
            testDebugAll.dependsOn(tasks.named("testDebugUnitTest"))
        }
    }
    plugins.withId("com.android.application") {
        project.apply from: "$rootDir/lint.gradle"
        afterEvaluate {
            testDebugAll.dependsOn(tasks.named("testDebugUnitTest"))
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

tasks.register("installGitHooks") {
    setGroup("Build Setup")
    setDescription("Install local repository git hooks")
    exec {
        commandLine 'sh', '-c', 'git config core.hooksPath .githooks'
    }
}

var initialTaskNames = getProject().getGradle().getStartParameter().getTaskNames()
getProject().getGradle().getStartParameter().setTaskNames(
        initialTaskNames + Collections.singletonList("installGitHooks"))